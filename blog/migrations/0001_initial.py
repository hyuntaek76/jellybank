# Generated by Django 3.0.3 on 2020-02-09 03:28

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=20, verbose_name='카테고리명')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='대표사진')),
                ('is_comment_ok', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=True, verbose_name='댓글공개')),
                ('is_publish_ok', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=True, verbose_name='카테고리공개')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(max_length=20, verbose_name='사이트명')),
                ('site_url', models.CharField(blank=True, max_length=20, verbose_name='사이트주소')),
                ('site_description', models.TextField(blank=True, max_length=50, verbose_name='사이트설명')),
                ('site_photo', models.ImageField(blank=True, upload_to='', verbose_name='대표사진')),
                ('site_script_01', models.TextField(blank=True, max_length=200, verbose_name='첫번째 스크립트설치')),
                ('site_script_02', models.TextField(blank=True, max_length=200, verbose_name='두번째 스크립트설치')),
                ('site_script_03', models.TextField(blank=True, max_length=200, verbose_name='세번째 스크립트설치')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='포스팅 제목을 입력해주세요. 최대 100자 내외.', max_length=100, verbose_name='제목')),
                ('slug', models.SlugField(allow_unicode='True', blank=True)),
                ('content', models.TextField(verbose_name='내용')),
                ('summary', models.TextField(blank=True, max_length=150, verbose_name='컨텐츠 요약')),
                ('meta_keyword', models.CharField(blank=True, max_length=100, verbose_name='대표키워드')),
                ('photo', models.ImageField(blank=True, upload_to='blog/%Y/%m/%d', verbose_name='대표사진')),
                ('photo_description', models.TextField(blank=True, max_length=50, verbose_name='대표사진설명')),
                ('is_publish_ok', models.BooleanField(choices=[(True, '공개'), (False, '비공개')], default=False, verbose_name='글공개')),
                ('created_at', models.DateField(default=django.utils.timezone.now, verbose_name='발행일')),
                ('updated_at', models.DateField(auto_now=True)),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='blog.Category')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Post')),
            ],
        ),
    ]
